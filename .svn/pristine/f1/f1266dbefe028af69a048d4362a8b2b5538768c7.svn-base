import { Component, OnInit, AfterViewInit, ViewChild } from '@angular/core';
import { GenericService } from 'src/app/services/generic.service';

import { Deal } from '../deal.model';
import { DealMaster } from '../dealmaster.model';
import { Router, ActivatedRoute } from '@angular/router';
import { NgForm } from '@angular/forms';

import { MDBModalRef, MDBModalService, ToastService } from 'ng-uikit-pro-standard'
import { Contactperson } from '../contactperson.model';
import { SpBLBase } from 'src/app/Base/SpBLBase/SpBLBase.component';
import { NgxSpinnerService } from 'ngx-spinner';
import { ConfirmDialogeService } from 'src/app/confirm-dialoge/confirm-dialoge.service';
import { MessageDialogeService } from 'src/app/message-dialoge/message-dialoge.service';
import { CommonService } from '../../../Base/Common.service';
import { SPOperationsService } from 'src/app/services/spoperations.service';

import { SharePointConfigService } from 'src/app/Base/SharePoint/share-point-config.service';
import { Autocomplete } from 'src/app/Base/Autocomplete';
import { Dealtype } from 'src/app/modules/admin/dealtype/dealtype.model';
import { Projecttype } from 'src/app/modules/admin/projecttype/projecttype.model';
import { Market } from 'src/app/modules/admin/market/market.model';
import { Broker } from 'src/app/modules/admin/broker/broker.model';
import { Brokerage } from 'src/app/modules/admin/brokerage/brokerage.model';
import { SubMarket } from 'src/app/modules/admin/submarket/submarket.model';
import { Status } from 'src/app/modules/admin/status/status.model';
import { Vendor } from '../vendor/vendor.model';
import { InvestmentSummary } from '../investmentsummary.model';
import { DealComments } from '../dealcomments.model';
import { BMRnotes } from '../BMRnotes.model';
import { unescapeLeadingUnderscores } from '@schematics/angular/third_party/github.com/Microsoft/TypeScript/lib/typescript';
import { Seller } from '../seller.model';
import { QuickLinks } from '../quicklinks.model';
import { KeyUpcomingDates } from '../keyupcomingdates.model';
import { MatOption } from '@angular/material/core';
import { MatSelect } from '@angular/material/select';



@Component({
  selector: 'app-deal',
  templateUrl: './deal.component.html',
  styleUrls: ['./deal.component.scss']
})

export class DealComponent extends SpBLBase<DealMaster> implements OnInit {


  public modalRef: MDBModalRef;
  primaryKey: number;

  datemask = [/\d/, /\d/, '/', /\d/, /\d/, '/', /\d/, /\d/, /\d/, /\d/];
  AutoCompVendor: Autocomplete<Vendor> = new Autocomplete<Vendor>("Title", "ID");
  AutoCompDealType: Autocomplete<Dealtype> = new Autocomplete<Dealtype>("Title", "ID");
  AutoCompProjectType: Autocomplete<Projecttype> = new Autocomplete<Projecttype>("Title", "ID");
  AutoCompMarket: Autocomplete<Market> = new Autocomplete<Market>("Title", "ID");
  AutoCompBrokerage: Autocomplete<Brokerage> = new Autocomplete<Brokerage>("Title", "ID");
  AutoCompBroker: Autocomplete<Broker> = new Autocomplete<Broker>("Title", "ID");
  AutoCompSubMarket: Autocomplete<SubMarket> = new Autocomplete<SubMarket>("Title", "ID");
  AutoCompStatus: Autocomplete<Status> = new Autocomplete<Status>("Title", "ID");
  AutoCompFund: Autocomplete<Status> = new Autocomplete<Status>("Title", "ID");
  AutoBMRDealTeam: Autocomplete<any> = new Autocomplete<any>("Title", "Id");
  ID: number = 0;
  KeyUpcomingrepeating: any[] = [{
    UpcomingDate: '',
    Description: '',

  }];
  Sellerrepeating: any[] = [{
    Title: ''
  }];
  QuickLinks: any[] = [{
    Title: '',
    DocLink: '',

  }];



  objInvestmentSummary: InvestmentSummary;
  objDealComments: DealComments;
  objBMRNotes: BMRnotes;
  objSeller: Seller;
  objQuickLinks: QuickLinks;
  objKeyUpcomingDates: KeyUpcomingDates;
  @ViewChild('mySel') skillSel: MatSelect
  constructor(
    public service: SPOperationsService,
    public router: Router,
    public route: ActivatedRoute,
    public spinner: NgxSpinnerService,
    public toast: ToastService,
    public dialog: ConfirmDialogeService,
    public modalService: MDBModalService,
    public messageDialoge: MessageDialogeService,
    public common: CommonService,
    public spConfigService: SharePointConfigService
  ) {
    super(service, router, route, spinner, toast, dialog, messageDialoge);

    this.formTitle = "Deal Master";
    this.addListTitle("DealMaster", "DealMaster");
    this.query = {
      select: "ID, Title,DateEntered,Address",//Need to add all Master list columns
    }
  }

  public Initializeobject() {
    this.formData = new DealMaster();
    this.objInvestmentSummary = new InvestmentSummary();
    this.objDealComments = new DealComments();
    this.objBMRNotes = new BMRnotes();
    this.objSeller = new Seller();
    this.objKeyUpcomingDates = new KeyUpcomingDates();
    this.objQuickLinks = new QuickLinks();
  }


  ngOnInit(): void {

    super.ngOnInit();
    this.getMarkets();
    this.getDealTeamUsers();
    this.getDealTypes();
    this.getProjectTypes();
    this.getBrokerage();
    this.getBroker();
    this.getStatus();
    this.modalService.closed.subscribe(() => {
      console.log('closed')
    });

    this.route.queryParams
      .subscribe(params => {
        this.ID = params['ID'] || 0;
      });


  }

  isPurchasePriceEnabled: boolean = true;
  isPurchasePricePSFEnabled: boolean = true;


  AfterInit() {
    this.formData.ID = Number(this.ID);
  }
  selectionMarket(value: any) {
    if (value.value != undefined){
      this.getSubMarket(value);
    }else{
      this.AutoCompSubMarket.data = [];
      this.AutoCompSubMarket.resultObserve();
    }
      
      
      
  }
  getDealTypes() {
    const query = {
      select: 'ID, Title, Inactive,Modified, Editor/Title',
      expand: 'Editor',
      filter: 'Inactive eq true or Inactive eq null',
      orderby: 'Title asc'
    };

    this.service.readItems("DealType", query).then(res => {
      this.common.HideSpinner();
      this.AutoCompDealType.data = res['d'].results as Dealtype[];
      this.AutoCompDealType.resultObserve();

    });

  }
  getBrokerage() {
    const query = {
      select: 'ID, Title, Inactive,Modified, Editor/Title',
      expand: 'Editor',
      filter: 'Inactive eq true or Inactive eq null',
      orderby: 'Title asc'
    };

    this.service.readItems("Brokerage", query).then(res => {
      this.common.HideSpinner();
      this.AutoCompBrokerage.data = res['d'].results as Brokerage[];
      this.AutoCompBrokerage.resultObserve();

    });

  }
  getBroker() {
    const query = {
      select: 'ID, Title, Inactive,Modified, Editor/Title',
      expand: 'Editor',
      filter: 'Inactive eq true or Inactive eq null',
      orderby: 'Title asc'
    };

    this.service.readItems("Brokers", query).then(res => {
      this.common.HideSpinner();
      this.AutoCompBroker.data = res['d'].results as Broker[];
      this.AutoCompBroker.resultObserve();

    });

  }
  onSubmit(form: NgForm) {
    //BLBase function
    var objDeal = new DealMaster();
    objDeal.ID = this.formData.ID;
    objDeal.Title = this.formData.Title;
    objDeal.DateEntered = this.formData.DateEntered;
    objDeal.Address = this.formData.Address;
    objDeal.City = this.formData.City;
    objDeal.ZipCode = this.formData.ZipCode;
    objDeal.State = this.formData.State;
    objDeal.Description = this.formData.Description;
    objDeal.MarketId = this.formData.MarketId;
    objDeal.SubMarketId = this.formData.SubMarketId;
    objDeal.DealTypeId = this.formData.DealTypeId;
    objDeal.ProjectTypeId = this.formData.ProjectTypeId;
    objDeal.StatusId = this.formData.StatusId;
    objDeal.ReportOutput = this.formData.ReportOutput;
    if (this.formData.BrokerageId != null) {
      var objBrokerage = {
        results: this.formData.BrokerageId
      }
      objDeal.BrokerageId = objBrokerage;
    } else {
      objDeal.BrokerageId = null;
    }

    if (this.formData.BrokersId != null) {
      var objBrokers = {
        results: this.formData.BrokersId
      }
      objDeal.BrokersId = objBrokers;
    } else {
      objDeal.BrokersId = null;
    }

    this.insertRecord(objDeal);
  }
  async SaveInvestmentSummary() {
    var objIS = new InvestmentSummary();
    objIS.DealId = this.primaryKey;
    objIS.ID = this.objInvestmentSummary.ID;
    objIS.Funds = this.objInvestmentSummary.Funds;
    objIS.AnalysisStartDate = this.objInvestmentSummary.AnalysisStartDate;
    objIS.EstCompletionDate = this.objInvestmentSummary.EstCompletionDate;
    objIS.InPlaceRSF = this.objInvestmentSummary.InPlaceRSF;
    objIS.StabilizedRSF = this.objInvestmentSummary.StabilizedBasis;
    objIS.PurchasePrice = this.objInvestmentSummary.PurchasePrice;
    objIS.PurchasePricePSF = this.objInvestmentSummary.PurchasePricePSF;
    objIS.StabilizedBasis = this.objInvestmentSummary.StabilizedBasis;
    objIS.StabilizedBasisPSF = this.objInvestmentSummary.StabilizedBasisPSF;
    objIS.LabMarketRentPSFAnn = this.objInvestmentSummary.LabMarketRentPSFAnn;
    objIS.LabMarketRentPSFMon = this.objInvestmentSummary.LabMarketRentPSFMon;
    objIS.HardCostsPSF = this.objInvestmentSummary.HardCostsPSF;
    objIS.TenantImprovementsPSF = this.objInvestmentSummary.TenantImprovementsPSF;
    objIS.ConversionCostPSF = this.objInvestmentSummary.ConversionCostPSF;
    objIS.UntrendedYoC = this.objInvestmentSummary.UntrendedYoC;
    await this.service.createSPItem("InvestmentSummary", "InvestmentSummary", objIS).subscribe(res => {

    })
  }
  async SaveBMRNotes() {
    if (this.objBMRNotes.Notes != null || this.objBMRNotes.Notes != undefined) {
      var objBN = new BMRnotes();
      objBN.DealId = this.primaryKey;
      objBN.ID = this.objBMRNotes.ID;
      objBN.Notes = this.objBMRNotes.Notes;
      await this.service.createSPItem("BMR Notes", "BMR Notes", objBN).subscribe(res => {

      })
    }
  }
  async SaveDealComments() {
    if (this.objDealComments.Notes != null || this.objDealComments.Notes != undefined) {
      var objDC = new BMRnotes();
      objDC.DealId = this.primaryKey;
      objDC.ID = this.objDealComments.ID;
      objDC.Notes = this.objDealComments.Notes;
      await this.service.createSPItem("Deal Comments", "Deal Comments", objDC).subscribe(res => {

      })

    }

  }
  AfterInsert(jsonObject: any) {
    this.ShowSpinner();
    Promise.all(
      [
        this.SaveInvestmentSummary(),
        this.SaveBMRNotes(),
        this.SaveDealComments(),
        this.SaveKeyUpcoming(),
        this.SaveSeller(),
        this.SaveQuickLinks,
      ]).then(res => {

        this.common.HideSpinner();
        this.router.navigate(['/portal/deals/list'], { queryParams: { status: 'All' } });
      })

  }

  getSubMarket(value) {
    this.common.ShowSpinner();
    const query = {
      select: 'ID, Title, MarketId,Inactive,Modified, Editor/Title',
      expand: 'Editor',
      filter: '(Inactive eq true or Inactive eq null) and MarketId eq ' + value.value,
      orderby: 'Title asc'
    };

    this.service.readItems("SubMarket", query).then(res => {
      this.common.HideSpinner();
      this.AutoCompSubMarket.data = res['d'].results as SubMarket[];
      this.AutoCompSubMarket.resultObserve();

    });

  }
  getMarkets() {
    const query = {
      select: 'ID, Title, Inactive,Modified, Editor/Title',
      expand: 'Editor',
      filter: 'Inactive eq true or Inactive eq null',
      orderby: 'Title asc'
    };

    this.service.readItems("Market", query).then(res => {
      this.common.HideSpinner();
      this.AutoCompMarket.data = res['d'].results as Market[];
      this.AutoCompMarket.resultObserve();

    });

  }
  allSelected = true;
  toggleAllSelection() {
  // to control select-unselect

  this.allSelected = !this.allSelected;  // to control select-unselect

  if (this.allSelected) {
      this.skillSel.options.forEach((item: MatOption) => item.select());
    } else {
      this.skillSel.options.forEach((item: MatOption) => { item.deselect() });
    }
    //this.skillSel.close();
  }
  getDealTeamUsers() {
    this.service.getUsersByGroupName("BMR Deal Team").then(res => {
      console.log(res);
      this.AutoBMRDealTeam.data = null;
      this.AutoBMRDealTeam.data = res['d']['results'] as any[];
      this.AutoBMRDealTeam.resultObserve();
    })
  }
  getStatus() {
    const query = {
      select: 'ID, Title, Inactive,Modified, Editor/Title',
      expand: 'Editor',
      filter: 'Inactive eq true or Inactive eq null',
      orderby: 'Title asc'
    };

    this.service.readItems("Status", query).then(res => {
      this.common.HideSpinner();
      this.AutoCompStatus.data = res['d'].results as Status[];
      this.AutoCompStatus.resultObserve();

    });

  }
  getProjectTypes() {
    const query = {
      select: 'ID, Title, Inactive,Modified, Editor/Title',
      expand: 'Editor',
      filter: 'Inactive eq true or Inactive eq null',
      orderby: 'Title asc'
    };

    this.service.readItems("ProjectType", query).then(res => {
      this.common.HideSpinner();
      this.AutoCompProjectType.data = res['d'].results as Projecttype[];
      this.AutoCompProjectType.resultObserve();

    });

  }

  onReload(form: NgForm) {
    this.router.navigate(['/contact/form'], { queryParams: { ID: this.primaryKey, vendorID: this.ID } })
  }
  onBack() {
    this.router.navigate(['/home']);
  }
  /////////////Key Upcoming Dates Section//////////////////////////
  async SaveKeyUpcoming() {
    if (this.KeyUpcomingrepeating.length >= 0) {
      var postCalls = []; 
      for (let index = 0; index < this.KeyUpcomingrepeating.length; index++) {
        const element = this.KeyUpcomingrepeating[index];
        if (element.Description != null && element.UpcomingDate != null) {
          var objKUD = new KeyUpcomingDates();
          objKUD.ID = 0;
          objKUD.DealId = this.primaryKey;
          objKUD.KeyUpcomingDate = element.UpcomingDate;
          objKUD.Title = element.Description;
          postCalls.push(this.service.createSPItem("KeyUpcomingDates", "KeyUpcomingDates", objKUD).toPromise());
        }
      }
    }
  }
  AddKeyUpcomingRow() {
    if (this.KeyUpcomingrepeating.length >= 0) {
      this.KeyUpcomingrepeating.push({
        UpcomingDate: '',
        Description: '',
      });
    }
  }
  DeleteRow(index: number) {
    if (this.KeyUpcomingrepeating.length != 1) {
      this.dialog.openConfirmDialog("Are you sure you want to delete this row?").afterClosed().subscribe(res => {
        if (res) {

          this.KeyUpcomingrepeating.splice(index, 1);
        }
      })
    }
  }
  /////////////Quick Links Section/////////////////////////////////
  async SaveQuickLinks() {
    if (this.QuickLinks.length >= 0) {
      var postCalls = []; 
      for (let index = 0; index < this.QuickLinks.length; index++) {
        const element = this.QuickLinks[index];
        if (element.Title != null && element.DocLink != null) {
          var objQL = new QuickLinks();
          objQL.ID = 0;
          objQL.DealId = this.primaryKey;
          objQL.DocLink = element.DocLink;
          objQL.Title = element.Title;
          postCalls.push(this.service.createSPItem("Quick Links", "Quick Links", objQL).toPromise());
        }
      }
    }
  }
  AddQuickLinksRow() {
    if (this.QuickLinks.length >= 0) {
      this.QuickLinks.push({
        Title: '',
        DocLink: '',
    
      });
    }
  }
  DeleteRowQuickLinks(index: number) {
    if (this.QuickLinks.length != 1) {
      this.dialog.openConfirmDialog("Are you sure you want to delete this row?").afterClosed().subscribe(res => {
        if (res) {

          this.QuickLinks.splice(index, 1);
        }
      })
    }
  }
  /////////////Seller Section//////////////////////////////////////
  async SaveSeller() {

    if (this.Sellerrepeating.length >= 0) {
      var postCalls = [];

      // Industry      
      for (let index = 0; index < this.Sellerrepeating.length; index++) {

        const element = this.Sellerrepeating[index];
        if (element.Title != null) {
          var objS = new Seller();
          objS.ID = 0;
          objS.DealId = this.primaryKey;
          objS.Title = element.Title;
          postCalls.push(this.service.createSPItem("Seller", "Seller", objS).toPromise());
        }

      }
    }


  }
  AddSellerRow() {
    if (this.Sellerrepeating.length >= 0) {
      this.Sellerrepeating.push({ Title: '' });
    }
  }
  DeleteRowSeller(index: number) {
    if (this.Sellerrepeating.length != 1) {
      this.dialog.openConfirmDialog("Are you sure you want to delete this row?").afterClosed().subscribe(res => {
        if (res) {

          this.Sellerrepeating.splice(index, 1);
        }
      })
    }

  }
  /////////////Calculations////////////////////////////////////////
  calculate(text) {

    if (text.name == 'PurchasePrice') {
      this.objInvestmentSummary.PurchasePricePSF = (this.objInvestmentSummary.PurchasePrice / this.objInvestmentSummary.InPlaceRSF) == NaN ? 0 : (this.objInvestmentSummary.PurchasePrice / this.objInvestmentSummary.InPlaceRSF);
      if (isNaN(this.objInvestmentSummary.PurchasePricePSF))
        this.objInvestmentSummary.PurchasePricePSF = 0;

    } else if (text.name == 'PurchasePricePSF') {
      this.objInvestmentSummary.PurchasePrice = (this.objInvestmentSummary.PurchasePricePSF * this.objInvestmentSummary.InPlaceRSF) == undefined ? 0 : (this.objInvestmentSummary.PurchasePricePSF * this.objInvestmentSummary.InPlaceRSF);

    } else {
      this.objInvestmentSummary.PurchasePricePSF = 0;
      this.objInvestmentSummary.PurchasePrice = 0;
    }


  }

  calculateStabilized(text) {

    if (text.name == 'StabilizedBasis') {
      this.objInvestmentSummary.StabilizedBasisPSF = (this.objInvestmentSummary.StabilizedBasis / this.objInvestmentSummary.StabilizedRSF) == NaN ? 0 : (this.objInvestmentSummary.StabilizedBasis / this.objInvestmentSummary.StabilizedRSF);
      if (isNaN(this.objInvestmentSummary.StabilizedBasisPSF))
        this.objInvestmentSummary.StabilizedBasisPSF = 0;

    } else if (text.name == 'StabilizedBasisPSF') {
      this.objInvestmentSummary.StabilizedBasis = (this.objInvestmentSummary.StabilizedBasisPSF * this.objInvestmentSummary.StabilizedRSF) == undefined ? 0 : (this.objInvestmentSummary.StabilizedBasisPSF * this.objInvestmentSummary.StabilizedRSF);

    } else {
      this.objInvestmentSummary.StabilizedBasisPSF = 0;
      this.objInvestmentSummary.StabilizedBasis = 0;
    }


  }
  stabilizedrsf: number = null;
  stabilizedbasis: number = null;
  stabilizedbasispsf: number = null;
  calculatestabilized(value) {
    this.stabilizedbasispsf = value / this.stabilizedrsf;
  }
  labmrketann: number = null;
  labmrketmon: number = null;

  calculatelabmarket(value) {
    this.objInvestmentSummary.LabMarketRentPSFMon = this.objInvestmentSummary.LabMarketRentPSFAnn / 12;
  }
}
