// import { State } from 'src/app/modules/admin/state/state.model';
import { DealMaster } from './../dealmaster.model';
import { Subject } from 'rxjs';
import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';
import { GenericService } from 'src/app/services/generic.service';
import { Router, ActivatedRoute } from '@angular/router';
import { CalendarEvent, CalendarEventAction, CalendarDateFormatter, CalendarEventTimesChangedEvent, CalendarView, CalendarMonthViewBeforeRenderEvent } from 'angular-calendar';
import { MatDatepickerInputEvent } from '@angular/material/datepicker';
import { FormControl } from '@angular/forms';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { default as _rollupMoment, Moment } from 'moment';
import * as _moment from 'moment';
import { MatTableDataSource } from '@angular/material/table';
import { Table } from 'src/app/Base/Table';
import { ToastService, MDBModalService, MDBModalRef, ModalDirective } from 'ng-uikit-pro-standard';
import { CommonService } from '../../../Base/Common.service';
import { DateTime } from 'luxon';
import { SPOperationsService } from 'src/app/services/spoperations.service';
import { Status } from 'src/app/modules/admin/status/status.model';
import { Market } from 'src/app/modules/admin/market/market.model';
import { Dealtype } from 'src/app/modules/admin/dealtype/dealtype.model';
import { Projecttype } from 'src/app/modules/admin/projecttype/projecttype.model';

import { Autocomplete } from 'src/app/Base/Autocomplete';
import { MatSelect } from '@angular/material/select';
import { MatOption } from '@angular/material/core';
import moment from 'moment';

@Component({
  selector: 'app-dealslist',
  templateUrl: './dealslist.component.html',
  styleUrls: ['./dealslist.component.scss']
})

export class DealslistComponent extends Table implements OnInit {
  // =================== variables
  //#region
  GraphView: boolean = true;
  ListView: boolean = false;
  CalendarViewChip: boolean = true;
  view: CalendarView = CalendarView.Month;
  CalendarView = CalendarView;
  viewDate: Date = new Date();
  @ViewChild('modalContent', {
    static: true
  })

  modalContent: TemplateRef < any > ;
  public searchInput = false;
  refresh: Subject < any > = new Subject();
  DisplayName: string = "";
  displayedColumns: string[] = ['Title', 'Market', 'SubMarket', 'Status', 'DateEntered', 'DealType', 'ProjectType'];
  public modalRef: MDBModalRef;
  selectedChipStatusName = "Status";
  selectedChipViewName = "L";
  activeDayIsOpen: boolean = true;
  headingName: string = "";
  parent: string = "";
  other: string = "";

  filterby: string = 'Status'; // by default
  clickedDate: Date;
  clickedColumn: number;
  calendarDate: any[] = []
  longitude = -87.623177;
  latitude = 41.881832;
  selectedChipModule = "Occupancy";
  selectedChipPeriod = "DoD";
  FilterDate: Date = new Date();
  StatusName: string = null;
  MarketName: string = "";
  ProjectTypeName: string = "";
  DealTypeName: string = "";
  YearName : string = "";

  AutoCompYear: Autocomplete<any> = new Autocomplete<any>("Title", "ID");
  AutoCompStatus: Autocomplete<Status> = new Autocomplete<Status>("Title", "ID");
  AutoCompMarket: Autocomplete<Market> = new Autocomplete<Market>("Title", "ID");
  AutoCompDealType: Autocomplete<Dealtype> = new Autocomplete<Dealtype>("Title", "ID");
  AutoCompProjectType: Autocomplete<Projecttype> = new Autocomplete<Projecttype>("Title", "ID");
  markers = [{
      latitude: 41.881832,
      longitude: -87.623177,
      Title: 'Chicago'
    },
    {
      latitude: 40.7128,
      longitude: -74.0060,
      Title: 'New York'
    },
    {
      latitude: 27.798244,
      longitude: -82.798462,
      Title: 'Florida'
    },
    {
      latitude: 41.392502,
      longitude: -81.534447,
      Title: 'Bedford, OH, the US'
    },
    {
      latitude: 32.349998,
      longitude: -95.300003,
      Title: 'Texas'
    }
  ];

  protected _onDestroy = new Subject < void > ();
  modalData: {
    action: string;
    event: CalendarEvent;
  };
  labelOptions = {
    color: '#CC0000',
  }
  actions: CalendarEventAction[] = [{
      label: '<i class="fas fa-fw fa-pencil-alt"></i>',
      a11yLabel: 'Edit',
      onClick: ({
        event
      }: {
        event: CalendarEvent
      }): void => {
        this.handleEvent('Edited', event);
      },
    },
    {
      label: '<i class="fas fa-fw fa-trash-alt"></i>',
      a11yLabel: 'Delete',
      onClick: ({
        event
      }: {
        event: CalendarEvent
      }): void => {
        this.events = this.events.filter((iEvent) => iEvent !== event);
        this.handleEvent('Deleted', event);
      },
    },
  ];
  events: CalendarEvent[];
  Allevents: CalendarEvent[];
  handleEvent(action: string, event: CalendarEvent): void {
    this.modalData = {
      event,
      action
    };
    this.modal.open(this.modalContent, {
      size: 'lg'
    });
  }

  @ViewChild('Status') Status: MatSelect;
  @ViewChild('Market') Market: MatSelect;
  @ViewChild('ProjectType') ProjectType: MatSelect;
  @ViewChild('DealType') DealType: MatSelect;
  @ViewChild('Year') Year: MatSelect;
  constructor(
    private modal: NgbModal,
    public service: SPOperationsService,
    public router: Router,
    public modalService: MDBModalService,
    public common: CommonService,
    public route: ActivatedRoute
  ) {
    super(router);
    this.common.hideGlobalSearch = true;
  }
  navigate(property: any) {
    this.router.navigate(['/portal/deals/main'], {
      queryParams: {
        ID: property.ID
      }
    });
  }
  onMouseHover(infoWindow, gm, row: any) {
    if (gm.lastOpen != null) {
      try {
        gm.lastOpen.close();
      } catch (error) {
        console.log(error);
      }
    }
    gm.lastOpen = infoWindow;
    //this.currentID = row.ID;
    infoWindow.open();
  }
  onMouseOut(infoWindow, $event: MouseEvent) {
    infoWindow.close();
  }
  ngOnInit(): void {
    this.viewDate = new Date();
    this.getDealsData();    // get deals data
    this.getStatus();
    this.getMarkets();
    this.getDealTypes();
    this.getProjectTypes();
    // set dashboard heading
    if (this.other != '') {
      this.setheading(this.other);
    }
  }
  // on destroy of component - life cycle hook
  ngOnDestroy() {
    this.common.hideGlobalSearch = false;
  }
  // get deals data
  getDealsData() {
    this.common.ShowSpinner();
    // ------------------ Set filters
    var filter = "isDeleted ne true";
    // YearName
    if (this.YearName != "" && this.YearName != undefined && this.YearName != null) {
      for (let index = 0; index < this.YearName.length; index++) {
        const element = this.YearName[index];
        filter += " and";
        var sDate = new Date(element);
        filter += " (DateEntered ge '" + moment(new Date(sDate.getFullYear(), sDate.getMonth(), 1)).format('YYYY-MM-DD') +"' and DateEntered le '" + moment(new Date(sDate.getFullYear(), 11, 31)).format('YYYY-MM-DD') +"')";
      }
    }
    // MarketName
    if (this.MarketName != "" && this.MarketName != undefined && this.MarketName != null) {
      for (let index = 0; index < this.MarketName.length; index++) {
        const element = this.MarketName[index];
        filter += " and";
        filter += " (MarketId eq " + element.toString() +")";
      }
    }
    // StatusName
    if (this.StatusName != "" && this.StatusName != undefined && this.StatusName != null) {
      for (let index = 0; index < this.StatusName.length; index++) {
        const element = this.StatusName[index];
        filter += " and";
        filter += " (StatusId eq " + element.toString() +")";
      }
    }
    // DealTypeName
    if (this.DealTypeName != "" && this.DealTypeName != undefined && this.DealTypeName != null) {
      for (let index = 0; index < this.DealTypeName.length; index++) {
        const element = this.DealTypeName[index];
        filter += " and";
        filter += " (DealTypeId eq " + element.toString() +")";
      }
    }
    // ProjectTypeName
    if (this.ProjectTypeName != "" && this.ProjectTypeName != undefined && this.ProjectTypeName != null) {
      for (let index = 0; index < this.ProjectTypeName.length; index++) {
        const element = this.ProjectTypeName[index];
        filter += " and";
        filter += " (ProjectTypeId eq " + element.toString() +")";
      }
    }
    // ------------------- Set order by using filter by
    let orderby = "Status/Title";
    if (this.filterby == 'Market') {
      orderby = 'Market/Title';
    } else if (this.filterby == 'DealType') {
      orderby = 'DealType/Title';
    }
    // ------------------- set query
    const query = {
      select: 'ID, Title, SF, Market/Title, SubMarket/Title, DealType/Title, Status/Title, Address, DateEntered, ProjectType/Title',
      filter: filter,
      orderby: orderby,
      expand: 'Market, SubMarket, DealType, Status, ProjectType'
    };
    // ------------------- network call
    this.service.readItems("DealMaster", query).then(res => {
      let resItems = res['d'].results;
      console.log(resItems);
      let items = [];
      for (let k = 0 ; k< resItems.length; k++){
        let item = {
          ID: resItems[k].ID,
          Title: resItems[k].Title,
          Market: resItems[k].Market.Title,
          SubMarket: resItems[k].SubMarket.Title,
          Status: resItems[k].Status.Title,
          DateEntered: resItems[k].DateEntered,
          Address: resItems[k].Address,
          DealType: resItems[k].DealType.Title,
          ProjectType: resItems[k].ProjectType.Title,
        }
        items.push(item);
      }
      // console.log(items);
      if(filter == null || filter == "")
      this.getUniqueYears(items);
      var uniqueGroups = this.getUniqueGroupValues(items, this.filterby);
      this.setData(items, uniqueGroups, this.filterby);
      this.listData = new MatTableDataSource(items as DealMaster[]);
      this.listData.sort = this.sort;
      this.listData.paginator = this.paginator;
      // map data
      this.setMapData(items);
      // hide spinner
      this.common.HideSpinner();
      // if (this.parent == 'contactcategories') {
      //   if (this.CategoryID > 0)
      //     this.setheading(res['d'].results.length > 0 ? res['d'].results[0].Category.Title : ''); //this.headingName  = res['d'].results.length > 0 ? res['d'].results[0].Category.Title : '';
      // }
    });
  }

  setData(data: any[], UniqueColumns: any[], filter) {
    for (let index = 0; index < UniqueColumns.length; index++) {
      const element = UniqueColumns[index];
      if (filter == 'Status' && data[index].Status == element) {
        var newIndex = data.findIndex(x => x.Status === element);
      } else if (filter == 'DealType' && data[index].DealType == element) {
        var newIndex = data.findIndex(x => x.DealType === element);
      } else
        var newIndex = data.findIndex(x => x.Market === element);
      // console.log(newIndex);
      data.splice(newIndex, 0, {
        Title: element,
        isGroup: true
      });
    }
  }

  setMapData(data: any) {
    this.markers = data;
  }

  getStatus() {
    const query = {
      select: 'ID, Title, Inactive,Modified, Editor/Title',
      expand: 'Editor',
      filter: 'Inactive eq true or Inactive eq null',
      orderby: 'Title asc'
    };

    this.service.readItems("Status", query).then(res => {
      this.common.HideSpinner();
      this.AutoCompStatus.data = res['d'].results as Status[];
      this.AutoCompStatus.resultObserve();

    });

  }

  getMarkets() {
    const query = {
      select: 'ID, Title, Inactive,Modified, Editor/Title',
      expand: 'Editor',
      filter: 'Inactive eq true or Inactive eq null',
      orderby: 'Title asc'
    };

    this.service.readItems("Market", query).then(res => {
      this.common.HideSpinner();
      this.AutoCompMarket.data = res['d'].results as Market[];
      this.AutoCompMarket.resultObserve();

    });

  }

  getProjectTypes() {
    const query = {
      select: 'ID, Title, Inactive,Modified, Editor/Title',
      expand: 'Editor',
      filter: 'Inactive eq true or Inactive eq null',
      orderby: 'Title asc'
    };

    this.service.readItems("ProjectType", query).then(res => {
      this.common.HideSpinner();
      this.AutoCompProjectType.data = res['d'].results as Projecttype[];
      this.AutoCompProjectType.resultObserve();

    });

  }

  getDealTypes() {
    const query = {
      select: 'ID, Title, Inactive,Modified, Editor/Title',
      expand: 'Editor',
      filter: 'Inactive eq true or Inactive eq null',
      orderby: 'Title asc'
    };
    this.service.readItems("DealType", query).then(res => {
      this.common.HideSpinner();
      this.AutoCompDealType.data = res['d'].results as Dealtype[];
      this.AutoCompDealType.resultObserve();
    });
  }

  getUniqueGroupValues(data: any[], filter): any[] {
    if (filter == 'Status') {
      return data.map(item => item.Status)
        .filter((value, index, self) => self.indexOf(value) === index)
    } else if (filter == 'DealType') {
      return data.map(item => item.DealType)
        .filter((value, index, self) => self.indexOf(value) === index)
    } else {
      return data.map(item => item.Market)
        .filter((value, index, self) => self.indexOf(value) === index)
    }
  }

  getUniqueYears(data: any[]){
      var items = [];
      var Filtereddata =  data.map(item => moment(item.DateEntered).format("YYYY"))
        .filter((value, index, self) => self.indexOf(value) === index)
        for(var i = 0 ;i<Filtereddata.length;i++){
          let item = {
            ID: Filtereddata[i],
            Title: Filtereddata[i]
          }
          items.push(item);
        }
        Filtereddata = items;
        this.AutoCompYear.data = null;
        this.AutoCompYear.data = Filtereddata as any[];
        this.AutoCompYear.resultObserve();
  }
  allSelected = true;
  toggleAllSelection(value) {
  this.allSelected = !this.allSelected;  // to control select-unselect

  if (this.allSelected) {
      if(value=="Status")
        this.Status.options.forEach((item: MatOption) => item.select());
      else if(value=="Market")
      this.Market.options.forEach((item: MatOption) => item.select());
      else if(value=="Deal Type")
      this.DealType.options.forEach((item: MatOption) => item.select());
      else if(value=="Project Type")
      this.ProjectType.options.forEach((item: MatOption) => item.select());
      else if(value=="Year")
      this.Year.options.forEach((item: MatOption) => item.select());
    } else {
      if(value=="Status")
      this.Status.options.forEach((item: MatOption) => { item.deselect() });
    else if(value=="Market")
    this.Market.options.forEach((item: MatOption) => { item.deselect() });
    else if(value=="Project Type")
    this.ProjectType.options.forEach((item: MatOption) => { item.deselect() });
    else if(value=="Deal Type")
    this.DealType.options.forEach((item: MatOption) => { item.deselect() });
    else if(value=="Year")
    this.Year.options.forEach((item: MatOption) => { item.deselect() });
    }
  }
  onFilterClear(frame: ModalDirective) {
    this.YearName = null;
    this.MarketName = "";
    this.StatusName = "";
    this.DealTypeName = "";
    this.ProjectTypeName = "";
    this.getDealsData();
    frame.hide();
  }

  onFilterClick(frame: ModalDirective) {
    this.getDealsData();
    frame.hide();
  }

  setheading(label) {
    this.headingName = label;
  }

  onEdit(gen: DealMaster){
    if (gen.ID != undefined)
      this.router.navigate(['/portal/deals/main'], {
        queryParams: {
          dealID: gen.ID
        }
      })
  }

  onChipStatusClick(symbol) {
    this.selectedChipStatusName = symbol;
    this.filterby = symbol;
    this.getDealsData();
  }

  onChipViewClick(symbol) {
    this.selectedChipViewName = symbol;
    if (symbol == 'G') {
      this.GraphView = false;
      this.ListView = true;
      this.CalendarViewChip = true;
    } else if (symbol == 'L') {
      this.GraphView = true;
      this.ListView = false;
      this.CalendarViewChip = true;
    } else if (symbol == 'C') {
      this.GraphView = true;
      this.ListView = true;
      this.CalendarViewChip = false;
    }
  }

  onBack() {
    this.router.navigate(['/home']);
  }

  openNewDealList() {
    this.router.navigate(['/portal/form']);
  }
}
