import { format } from 'date-fns';
export const MS_IN_DAY = 24 * 60 * 60 * 1000;
export const MS_IN_HOUR = 60 * 60 * 1000;
export function getPeriodEvents(events, start, end) {
    return events.filter((event) => {
        if (event.startDate >= start && event.endDate <= end) {
            return true;
        }
        if (event.endDate >= start && event.endDate <= end) {
            return true;
        }
        if (event.startDate <= start && event.endDate >= end) {
            return true;
        }
        return false;
    });
}
export function getMonthDayEvents(events, start, end) {
    return events
        .filter((event) => {
        if (event.startDate >= start && event.endDate <= end) {
            return true;
        }
        if (event.endDate >= start && event.endDate <= end) {
            return true;
        }
        if (event.startDate <= start && event.endDate >= end) {
            return true;
        }
        return false;
    })
        .map((event) => {
        return Object.assign(Object.assign({}, event), { startStr: format(event.startDate, 'YYYY-MM-DDTHH:mm:ss'), endStr: format(event.endDate, 'YYYY-MM-DDTHH:mm:ss'), eventStart: event.startDate >= start, eventEnd: event.endDate <= end, longEvent: event.endDate.getTime() - event.startDate.getTime() >= MS_IN_DAY });
    });
}
export function getListViewEvents(events, start, end) {
    return events
        .filter((event) => {
        if (event.startDate >= start && event.endDate <= end) {
            return true;
        }
        if (event.endDate >= start && event.endDate <= end) {
            return true;
        }
        if (event.startDate <= start && event.endDate >= end) {
            return true;
        }
        if (event.startDate >= start && event.startDate <= end) {
            return true;
        }
        return false;
    })
        .map((event) => {
        return Object.assign(Object.assign({}, event), { startStr: format(event.startDate, 'YYYY-MM-DDTHH:mm:ss'), endStr: format(event.endDate, 'YYYY-MM-DDTHH:mm:ss'), start: {
                date: format(event.startDate, 'DD/MM/YYYY'),
                time: format(event.startDate, 'h:mm:ss A')
            }, end: {
                date: format(event.endDate, 'DD/MM/YYYY'),
                time: format(event.endDate, 'h:mm:ss A')
            } });
    });
}
export function getWeekDayEvents(events, start, end, dayStart, dayEnd) {
    return events
        .filter((event) => {
        if (event.startDate >= start && event.endDate <= end) {
            return true;
        }
        if (event.endDate >= start && event.endDate <= end) {
            return true;
        }
        if (event.startDate <= start && event.endDate >= end) {
            return true;
        }
        return false;
    })
        .map((event) => {
        return Object.assign(Object.assign({}, event), { startStr: format(event.startDate, 'YYYY-MM-DDTHH:mm:ss'), endStr: format(event.endDate, 'YYYY-MM-DDTHH:mm:ss'), allDay: event.startDate <= dayStart && event.endDate.getTime() >= dayEnd.getTime() - 999 });
    });
}
export function getWeekHourEvents(events, start, end, dayStart, dayEnd) {
    return getWeekDayEvents(events, start, end, dayStart, dayEnd)
        .filter(event => !event.allDay)
        .map(event => {
        return Object.assign(Object.assign({}, event), { eventStart: event.startDate >= start, eventEnd: event.endDate <= end, longEvent: event.endDate.getTime() - event.startDate.getTime() >= MS_IN_HOUR });
    });
}
export function getWeekAllDayEvents(events, start, end, dayStart, dayEnd) {
    return getWeekDayEvents(events, start, end, dayStart, dayEnd)
        .filter(event => event.allDay)
        .map(event => {
        return Object.assign(Object.assign({}, event), { eventStart: event.startDate >= dayStart, eventEnd: event.endDate <= dayEnd, longEvent: event.endDate.getTime() - event.startDate.getTime() >= MS_IN_DAY });
    });
}
//# sourceMappingURL=data:application/json;base64,